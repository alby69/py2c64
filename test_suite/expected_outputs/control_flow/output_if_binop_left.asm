; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 10
; x2 = 20
; z = x1 + x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a1 = 5
; b = 3
; c = a1 * b + (a1 - b) // 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 250
; x2 = 10
; z = x1 + x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 10
; x2 = 0
; z = x1 // x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a = 10 # 00001010
; b = 5  # 00000101
; c = a ^ b # Expected result: 15 (00001111)
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; val1 = 255 # 11111111 00000000
; val2 = 85  # 01010101 00000000
; # 255 (00FF) ^ 85 (0055) = 170 (00AA)
; res_xor = val1 ^ val2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 2 * 5
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; y = 10 // 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; z = 5 + 3.14
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; my_list = [1, 2, 3]
; for item in my_list:
;   x = item * 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; i = 0
; while i < 5:
;   i = i + 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:

while_start_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ while_end_0
    JMP while_start_0
while_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 3
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 15
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 7
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 3
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 3
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 12
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 8
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x <= y:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x < y:
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; y = 5
; res = 0
; if x > 5:
;   if y < 10:
;     res = 1
;   else:
;     res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; res = 0
; if True:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; res = 0
; if False:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 10
; res = 0
; if x + 2 > y - 5:
;   res = 1
; # Expected: 7 > 5 -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program

; --- Data Segment (Variables and Constants) ---
res .res 2
temp_0 .res 4
temp_1 .res 4
temp_2 .res 2
temp_3 .res 2
x .res 2
y .res 2
res * = * + 2
temp_0 * = * + 4
temp_1 * = * + 4
temp_2 * = * + 4
temp_3 * = * + 4
x * = * + 2
y * = * + 2

; --- Subroutines ---

; Routine: ascii_to_petscii

ascii_to_petscii
    ; Input: A contains ASCII character
    ; Output: A contains PETSCII character (lowercase ASCII converted to uppercase PETSCII)
    CMP #'a'
    BCC no_conversion_needed_petscii
    CMP #'z'+1
    BCS no_conversion_needed_petscii
    SEC             ; Ensure Carry is set for SBC
    SBC #$20        ; Convert ASCII 'a'-'z' to PETSCII 'A'-'Z' (e.g. ASCII 'a' (97) - 32 = PETSCII 'A' (65))
no_conversion_needed_petscii
    RTS


; Routine: check_overflow

check_overflow
    ; Check the overflow flag (V)
    BVC no_overflow  ; Branch if Overflow Clear (no overflow)

    ; If we are here, there is an overflow
    JSR overflow_error_msg
    JMP end_program

no_overflow
    RTS

; Routine: end_program
end_program
    RTS

; Routine: overflow_error_msg
overflow_error_msg
    LDA #<overflow_msg
    STA temp_0
    LDA #>overflow_msg
    STA temp_0+1
    JMP print_string

; Routine: print_char

print_char
    ; Input: A = ASCII character
    ; Output: Prints character to screen via KERNAL CHROUT
    ; Modifies: A (CHROUT modifica A)
    ; Preserves: X, Y (CHROUT preserva X, Y)

    JSR ascii_to_petscii    ; Convert A from ASCII to PETSCII. A is now PETSCII.
    JSR chrout              ; Call KERNAL CHROUT routine (address defined in data section)
    RTS


; Routine: print_string

print_string
    ; Routine to print a string located at the address contained in the var temp_0
    ; Uses ZP locations $FA/$FB for the 16-bit string pointer.
    ; Preserves A and Y registers.
    PHA                     ; Save A
    TYA                     ; Transfer Y to A (to save Y on stack)
    PHA                     ; Push A (which now holds Y's original value)
    LDA temp_0                ; Load LSB of string address from temp_0 (a .word variable)
    STA $FA           ; Store LSB into ZP pointer
    LDA temp_0+1              ; Load high byte of address from temp_0+1
    STA $FB         ; Store MSB into ZP pointer

    LDY #$00                  ; Use Y as the index for LDA (ZP),Y. This Y is local to the loop.
print_loop_ps               ; Renamed label to avoid conflict if routine is included multiple times (though it shouldn't be)
        LDA ($FA),Y ; Use (Indirect),Y addressing with ZP pointer
        BEQ end_print_ps      ; If char is NUL, end.
        JSR print_char          ; print_char preserves A, does not use Y.
        INY                     ; Increment Y
    ; Check if Y wrapped around (very unlikely for typical strings)
    ; If Y becomes 0 after INY, it means we crossed a 256-byte boundary with Y.
    CPY #0
    BNE print_loop_ps       ; If Y is not 0, continue loop within the current 256-byte page
    ; If Y wrapped to 0, it means we printed 256 chars. Increment MSB of ZP pointer.
    INC $FB
    JMP print_loop_ps       ; And continue printing (Y is 0 again for the new page)
end_print_ps
    PLA                     ; Pop original Y value (into A)
    TAY                     ; Transfer A to Y (restoring Y)
    PLA                     ; Pop original A value
    RTS

