; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 10
; x2 = 20
; z = x1 + x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a1 = 5
; b = 3
; c = a1 * b + (a1 - b) // 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 250
; x2 = 10
; z = x1 + x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x1 = 10
; x2 = 0
; z = x1 // x2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a = 10 # 00001010
; b = 5  # 00000101
; c = a ^ b # Expected result: 15 (00001111)
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; val1 = 255 # 11111111 00000000
; val2 = 85  # 01010101 00000000
; # 255 (00FF) ^ 85 (0055) = 170 (00AA)
; res_xor = val1 ^ val2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 2 * 5
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; y = 10 // 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; z = 5 + 3.14
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; my_list = [1, 2, 3]
; for item in my_list:
;   x = item * 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; i = 0
; while i < 5:
;   i = i + 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:

while_start_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ while_end_0
    JMP while_start_0
while_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 3
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 15
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 7
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 3
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 3
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 12
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 8
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x <= y:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x < y:
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 10
; y = 5
; res = 0
; if x > 5:
;   if y < 10:
;     res = 1
;   else:
;     res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_2
    JMP if_end_2
if_else_2:
if_end_2:
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; res = 0
; if True:
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; res = 0
; if False:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_else_0
    JMP if_end_0
if_else_0:
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 10
; res = 0
; if x + 2 > y - 5:
;   res = 1
; # Expected: 7 > 5 -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 3
; y = 1
; res = 0
; if x * 2 == y + 5:
;   res = 1
; # Expected: 6 == 6 -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 0
; res = 0
; if not x:
;   res = 1
; # Expected: not 0 -> True -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; res = 0
; if not x:
;   res = 1
; # Expected: not 5 -> False -> res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 10
; res = 0
; if x > 0 and y > 0:
;   res = 1
; # Expected: True and True -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if x > 0 and y > 0:
;   res = 1
; # Expected: True and False -> res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 0
; y = 10
; res = 0
; if x > 0 and y > 0: # y > 0 should not be evaluated if the compiler is smart
;   res = 1
; # Expected: False and True -> res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if x > 0 or y > 0: # y > 0 should not be evaluated
;   res = 1
; # Expected: True or False -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 0
; y = 10
; res = 0
; if x > 0 or y > 0:
;   res = 1
; # Expected: False or True -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 0
; y = 0
; res = 0
; if x > 0 or y > 0:
;   res = 1
; # Expected: False or False -> res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if not (x == 0 and y == 0):
;   res = 1
; # Expected: not (False and True) -> not False -> True -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x = 0
; y = 0
; res = 0
; if not (x > 0 or y > 0):
;   res = 1
; # Expected: not (False or False) -> not False -> True -> res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; res = 0
; if True and False:
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a = 10
; b = 5
; res = 0
; if (a ^ b): # 10^5 = 15 (non-zero, quindi True)
;   res = 1
; # Expected: res = 1
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a = 7
; b = 7
; res = 0
; if (a ^ b): # 7^7 = 0 (zero, quindi False)
;   res = 1
; # Expected: res = 0
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_0
if_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; i = 0
; res = 0
; while i < 10:
;   res = res + i
;   i = i + 1
;   if i == 5:
;     break
; # Expected: res = 0+1+2+3+4 = 10, i = 5
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:

while_start_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ while_end_0
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
    JMP while_start_0
while_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; i = 0
; res = 0
; while i < 5:
;   i = i + 1
;   if i == 3:
;     continue
;   res = res + i
; # Expected: i=5, res = 1+2+4+5 = 12
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:

while_start_0:
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ while_end_0
    LDA temp_0+1
    LDX temp_0
    ORA X
    BEQ if_end_2
if_end_2:
    JMP while_start_0
while_end_0:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; my_list = [1, 2, 3, 4, 5]
; res = 0
; for item in my_list:
;   if item == 4:
;     break
;   res = res + item
; # Expected: res = 1+2+3 = 6
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; my_list = [1, 2, 3, 4, 5]
; res = 0
; for item in my_list:
;   if item == 3:
;     continue
;   res = res + item
; # Expected: res = 1+2+4+5 = 12
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; outer_sum = 0
; my_list = [1, 2, 3]
; for x in my_list: # x = 1, 2, 3
;     outer_sum = outer_sum + x
;     y = 0
;     while y < 2: # y = 0, 1
;         y = y + 1 # In Python, this would be inside the loop
;         if x == 2:
;             break # Exits the inner while if x is 2
;     # Se x=1, y arriva a 2. outer_sum = 1
;     # Se x=2, y=1, break. outer_sum = 1+2=3
;     # Se x=3, y arriva a 2. outer_sum = 3+3=6
; # Expected: outer_sum = 6
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; my_dict = {'a': 1, 'b': 2}
; x1 = my_dict['a']
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; t = (1, 2, 3)
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; s = {1, 2, 3, 2, 1}
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a_int = 10
; b_float_literal = 1.5
; c_float_result = a_int + b_float_literal
; # To observe the result, you might add: print(c_float_result)
; # For now, we primarily verify the generated assembly for the calculation.
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; a_float = 3.14
; b_float = 2.71
; result = a_float < b_float
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program
; Generated by py2c64 compiler
; --- Python Source Code ---
; x_float = 1.5
; y_float = 1.5
; is_equal = x_float == y_float
; --------------------------
* = $1000
; --- Main Program and Functions ---
main:
rts ; End of main program

; --- Data Segment (Variables and Constants) ---
is_equal .res 2
x_float .res 4
y_float .res 4
x_float * = * + 2
y_float * = * + 2

; --- Subroutines ---
