; Generated by py2c64 compiler

; --- Python Source Code ---
; x1 = 10
; x2 = 20
; z = x1 + x2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a1 = 5
; b = 3
; c = a1 * b + (a1 - b) // 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x1 = 250
; x2 = 10
; z = x1 + x2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x1 = 10
; x2 = 0
; z = x1 // x2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a = 10 # 00001010
; b = 5  # 00000101
; c = a ^ b # Expected result: 15 (00001111)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; val1 = 255 # 11111111 00000000
; val2 = 85  # 01010101 00000000
; # 255 (00FF) ^ 85 (0055) = 170 (00AA)
; res_xor = val1 ^ val2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 2 * 5
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; y = 10 // 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; z = 5 + 3.14
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; my_list = [1, 2, 3]
; for item in my_list:
;   x = item * 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; i = 0
; while i < 5:
;   i = i + 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 10
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; res = 0
; if x == 10:
;   res = 1
; # Expected: res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 10
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 3
; res = 0
; if x > 5:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 15
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 7
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 3
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; else:
;   res = 3
; # Expected: res = 3
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 12
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 8
; res = 0
; if x > 10:
;   res = 1
; elif x > 5:
;   res = 2
; # Expected: res = 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x <= y:
;   res = 1
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 5
; res = 0
; if x < y:
;   res = 1
; # Expected: res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 10
; y = 5
; res = 0
; if x > 5:
;   if y < 10:
;     res = 1
;   else:
;     res = 2
; else:
;   res = 3
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; res = 0
; if True:
;   res = 1
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; res = 0
; if False:
;   res = 1
; else:
;   res = 2
; # Expected: res = 2
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 10
; res = 0
; if x + 2 > y - 5:
;   res = 1
; # Expected: 7 > 5 -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 3
; y = 1
; res = 0
; if x * 2 == y + 5:
;   res = 1
; # Expected: 6 == 6 -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 0
; res = 0
; if not x:
;   res = 1
; # Expected: not 0 -> True -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; res = 0
; if not x:
;   res = 1
; # Expected: not 5 -> False -> res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 10
; res = 0
; if x > 0 and y > 0:
;   res = 1
; # Expected: True and True -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if x > 0 and y > 0:
;   res = 1
; # Expected: True and False -> res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 0
; y = 10
; res = 0
; if x > 0 and y > 0: # y > 0 should not be evaluated if the compiler is smart
;   res = 1
; # Expected: False and True -> res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if x > 0 or y > 0: # y > 0 should not be evaluated
;   res = 1
; # Expected: True or False -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 0
; y = 10
; res = 0
; if x > 0 or y > 0:
;   res = 1
; # Expected: False or True -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 0
; y = 0
; res = 0
; if x > 0 or y > 0:
;   res = 1
; # Expected: False or False -> res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 5
; y = 0
; res = 0
; if not (x == 0 and y == 0):
;   res = 1
; # Expected: not (False and True) -> not False -> True -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 0
; y = 0
; res = 0
; if not (x > 0 or y > 0):
;   res = 1
; # Expected: not (False or False) -> not False -> True -> res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; res = 0
; if True and False:
;   res = 1
; # Expected: res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a = 10
; b = 5
; res = 0
; if (a ^ b): # 10^5 = 15 (non-zero, quindi True)
;   res = 1
; # Expected: res = 1
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a = 7
; b = 7
; res = 0
; if (a ^ b): # 7^7 = 0 (zero, quindi False)
;   res = 1
; # Expected: res = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; i = 0
; res = 0
; while i < 10:
;   res = res + i
;   i = i + 1
;   if i == 5:
;     break
; # Expected: res = 0+1+2+3+4 = 10, i = 5
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; i = 0
; res = 0
; while i < 5:
;   i = i + 1
;   if i == 3:
;     continue
;   res = res + i
; # Expected: i=5, res = 1+2+4+5 = 12
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; my_list = [1, 2, 3, 4, 5]
; res = 0
; for item in my_list:
;   if item == 4:
;     break
;   res = res + item
; # Expected: res = 1+2+3 = 6
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; my_list = [1, 2, 3, 4, 5]
; res = 0
; for item in my_list:
;   if item == 3:
;     continue
;   res = res + item
; # Expected: res = 1+2+4+5 = 12
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; outer_sum = 0
; my_list = [1, 2, 3]
; for x in my_list: # x = 1, 2, 3
;     outer_sum = outer_sum + x
;     y = 0
;     while y < 2: # y = 0, 1
;         y = y + 1 # In Python, this would be inside the loop
;         if x == 2:
;             break # Exits the inner while if x is 2
;     # Se x=1, y arriva a 2. outer_sum = 1
;     # Se x=2, y=1, break. outer_sum = 1+2=3
;     # Se x=3, y arriva a 2. outer_sum = 3+3=6
; # Expected: outer_sum = 6
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; my_dict = {'a': 1, 'b': 2}
; x1 = my_dict['a']
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; t = (1, 2, 3)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; s = {1, 2, 3, 2, 1}
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a_int = 10
; b_float_literal = 1.5
; c_float_result = a_int + b_float_literal
; # To observe the result, you might add: print(c_float_result)
; # For now, we primarily verify the generated assembly for the calculation.
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a_float = 3.14
; b_float = 2.71
; result = a_float < b_float
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x_float = 1.5
; y_float = 1.5
; is_equal = x_float == y_float
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; p_float = 10.0
; q_float = 10.000001
; is_not_equal = p_float != q_float
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; int_val = 5
; float_val = 4.99
; is_greater = int_val > float_val
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 3.5
; y = -0.25
; z = 0.0
; # Verification of byte patterns for x, y, z in the .asm data section
; # would be done by inspecting the generated expected_outputs/float_assignments_literals/assign_positive_float_literal.asm
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a = -5.25
; abs_a = abs(a)  # Expected: 5.25
; b = 0.0
; sgn_a = sgn(a)    # Expected: -1.0
; sgn_b = sgn(b)    # Expected: 0.0
; sgn_c = sgn(10.0) # Expected: 1.0
; d = 2.0 # Placeholder for log, as FP_LOG is a stub
; log_d = log(d)
; log_int = log(1) # Test coercion
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; # Test exp() stub - should call FP_EXP and handle type.
; # FP_EXP itself will signal NotImplementedError at runtime.
; # We are testing the compilation path to FP_EXP.
; res_exp_float = exp(1.0)
; res_exp_int = exp(2) # Test integer to float coercion for argument
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a = 3.5
; b = 3.5
; c = -2.0
; 
; res_eq = (a == b)  # Expected: True (1)
; res_ne = (a != c)  # Expected: True (1)
; res_lt = (c < a)   # Expected: True (1)
; res_gt = (a > c)   # Expected: True (1)
; res_le1 = (a <= b) # Expected: True (1)
; res_le2 = (c <= a) # Expected: True (1)
; res_ge1 = (a >= b) # Expected: True (1)
; res_ge2 = (a >= c) # Expected: True (1)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; a_int = 5
; b_float = float(a_int)
; 
; c_float = -3.75
; d_int = int(c_float)
; 
; # Expected (for verification via print or debugger if available):
; # b_float should be 5.0
; # d_int should be -3 (due to truncation towards zero)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def get_pi():
;     return 3.14
; 
; a = get_pi()
; # 'a' should be treated as a float (4 bytes copied from __func_retval)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def to_float(x):
;     y = 1 # dummy local var
;     return float(x)
; 
; b_val = 10
; b = to_float(b_val)
; # 'b' should be treated as a float (4 bytes copied)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def get_int():
;     return 100
; 
; c = get_int()
; # 'c' should be treated as an int (2 bytes copied)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def returns_float():
;     val = 0.0 # dummy local
;     val = 1.5
;     return val # Current analysis might not catch this if 'val' type isn't tracked well
; 
; def returns_float_direct():
;     return 1.5
; 
; def returns_int():
;     return 7
; 
; f_val = returns_float_direct() # This should be detected as float return
; i_val = returns_int()
; # f_val is float, i_val is int
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; res = 0
; def my_func():
;   global res
;   res = 10
; my_func()
; # Expected: res = 10
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def add_one(x):
;   return x + 1
; val = 5
; result = add_one(val)
; # Expected: result = 6
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def multiply(a, b):
;   return a * b
; res = multiply(3, 4)
; # Expected: res = 12
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def set_val_to_zero():
;   return
; x = 5
; x = set_val_to_zero()
; # Expected: x = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; y = 0
; def do_nothing(p):
;   y = p + 1 # Modifica una globale per vedere se viene eseguita
; val = 0
; val = do_nothing(5)
; # Expected: val = 0, y = 6 (y non è il return value)
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def identity(n):
;   return n
; result = identity(100)
; # Expected: result = 100
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def square(val):
;   return val * val
; a = 2
; b = 3
; # Chiamata: square( (a+b) ) -> square(5)
; result = square(a + b)
; # Expected: result = 25
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def inner_func(val):
;   return val * 2
; def outer_func(x):
;   return inner_func(x + 1)
; # Chiamata: outer_func(3) -> inner_func(4) -> 8
; result = outer_func(3)
; # Expected: result = 8
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def check_sign(num):
;   if num > 0:
;     return 1
;   elif num < 0:
;     return -1
;   else:
;     return 0
; res_pos = check_sign(10)
; res_neg = check_sign(-5)
; res_zero = check_sign(0)
; # Expected: res_pos = 1, res_neg = -1, res_zero = 0
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; glob_var = 50
; def modify_global():
;   global glob_var
;   glob_var = 100
; modify_global()
; # Expected: glob_var = 100
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; x = 10 # Globale
; def func_with_collision(x): # Parametro x
;   return x * 2 # Dovrebbe usare il parametro x
; # Chiamata: func_with_collision(5) -> 10. La x globale rimane 10.
; result = func_with_collision(5)
; # Expected: result = 10, x (globale) = 10
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; def subtract(a, b):
;   return a - b
; var1 = 10
; var2 = 3
; result = subtract(var1, var2)
; # Expected: result = 7
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
; Generated by py2c64 compiler

; --- Python Source Code ---
; gfx_turn_on()
; gfx_clear_screen()
; while True: # pragma: no cover
;     pass # pragma: no cover
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
jsr gfx_turn_on
jsr gfx_clear_screen
; Generated by py2c64 compiler

; --- Python Source Code ---
; gfx_turn_on()
; gfx_clear_screen()
; 
; # Draw the lines that form the star
; draw_line(160, 100, 240, 40)
; draw_line(240, 40, 260, 120)
; draw_line(260, 120, 160, 160)
; draw_line(160, 160, 60, 120)
; draw_line(60, 120, 80, 40)
; draw_line(80, 40, 160, 100)
; 
; # Loop forever to keep the image on screen
; while True: # pragma: no cover
;     pass # pragma: no cover
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
jsr gfx_turn_on
jsr gfx_clear_screen
; Generated by py2c64 compiler

; --- Python Source Code ---
; gfx_turn_on()
; gfx_turn_off()
; --------------------------

* = $1000
; --- Main Program and Functions ---
main:
jsr gfx_turn_on
jsr gfx_turn_off
rts ; End of main program

; --- Data Segment (Variables and Constants) ---

; --- Subroutines ---

; Routine: gfx_turn_off
gfx_turn_off
    ; --- Turn off HGR graphics mode ---
    ; Based on "The Graphics Book for the Commodore 64", Sec 4.2.1.4

    ; Clear bit 5 of VIC Control Register 1 ($D011) to disable bitmap mode.
    LDA $D011
    AND #%11011111  ; Clear bit 5
    STA $D011

    ; Point character set back to default location.
    ; This is done by clearing bit 3 of VIC register $D018.
    LDA $D018
    AND #%11110111  ; Clear bit 3
    STA $D018
    RTS

; Routine: gfx_turn_on
gfx_turn_on
    ; --- Turn on HGR graphics mode (320x200) ---
    ; Based on "The Graphics Book for the Commodore 64", Sec 4.2.1.1

    ; Set bit 5 of VIC Control Register 1 ($D011) to enable bitmap mode.
    LDA $D011
    ORA #%00100000  ; Set bit 5 for bitmap mode
    STA $D011

    ; Ensure bit 4 of VIC Control Register 2 ($D016) is clear for standard hi-res (not multi-color).
    LDA $D016
    AND #%11101111  ; Clear bit 4
    STA $D016

    ; Set graphics memory to start at $2000 (8192).
    ; This is done by setting bit 3 of VIC register $D018.
    LDA $D018
    ORA #%00001000  ; Set bit 3
    STA $D018
    RTS
