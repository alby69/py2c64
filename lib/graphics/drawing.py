from typing import Dict, List

def get_drawing_routines() -> Dict[str, List[str]]:
    """Returns the routines for graphics from the graphics package."""
    return {
        'GON': [
            'GON:',
            '  JMP C824',
        ],
        'GOFF': [
            'GOFF:',
            '  JMP C841',
        ],
        'GCLEAR': [
            'GCLEAR:',
            '  JMP C912',
        ],
        'SCOLOR': [
            'SCOLOR:',
            '  JMP C931',
        ],
        'PCOLOR': [
            'PCOLOR:',
            '  JMP C92A',
        ],
        'PLOT': [
            'PLOT:',
            '  JMP C858',
        ],
        'UNPLOT': [
            'UNPLOT:',
            '  JMP C855',
        ],
        'SLINE': [
            'SLINE:',
            '  JMP C86B',
        ],
        'CLLINE': [
            'CLLINE:',
            '  JMP C868',
        ],

        # Full routine implementation starting at C824
        'C824': [
            'C824: ; INIT routine',
            '  NOP',
            '  LDA V+17',
            '  STA CBIE',
            '  LDA V+24',
            '  STA CBIF',
            '  LDA #%00111011',
            '  STA V+17',
            '  LDA #%00011000',
            '  STA V+24',
            '  LDA #$60',
            '  STA C824',
            '  RTS',
            'C841: ; GOFF routine',
            '  LDA CBIE',
            '  STA V+17',
            '  LDA CBIF',
            '  STA V+24',
            '  LDA #$EA',
            '  STA C824',
            '  JMP $E544',
            'C855: ; UNPLOT routine',
            '  LDX #$00',
            '  JMP C85A',
            'C858: ; PLOT routine',
            '  LDX #$80',
            'C85A: ; PL1 routine',
            '  STX FLG',
            '  JSR CHKCOM',
            '  JSR C879',
            '  JSR C894',
            '  JMP C8E2',
            'C868: ; CLLINE routine',
            '  LDX #$00',
            '  JMP C86D',
            'C86B: ; SLINE routine',
            '  LDX #$80',
            'C86D:',
            '  JSR C85A',
            '  JSR CHKCOM',
            '  JSR C879',
            '  JMP C9BB',
            'C879: ; TESCOR routine',
            '  JSR GETCOR',
            '  TXA',
            '  TAY',
            '  LDX XC+1',
            '  CPY #200',
            '  BCS C891',
            '  LDA XC',
            '  CPX #>320',
            '  BCC C890',
            '  BNE C891',
            '  CMP #<320',
            '  BCS C891',
            'C890: RTS',
            'C891: JMP QERR',
            'C894: ; HPOSN routine',
            '  STY CBIC',
            '  STA CBIA',
            '  STX CBIB',
            '  STA XC',
            '  STX XC+1',
            '  TYA',
            '  LSR A',
            '  LSR A',
            '  LSR A',
            '  TAX',
            '  LDA CB2F,X',
            '  STA B',
            '  TXA',
            '  AND #$03',
            '  TAX',
            '  LDA CB49,X',
            '  STA A',
            '  TYA',
            '  AND #7',
            '  CLC',
            '  ADC A',
            '  STA A',
            '  LDA XC',
            '  AND #$F8',
            '  STA OFFX',
            '  LDA #>GRAPH',
            '  ORA B',
            '  STA B',
            '  CLC',
            '  LDA A',
            '  ADC OFFX',
            '  STA A',
            '  LDA B',
            '  ADC XC+1',
            '  STA B',
            '  LDA XC',
            '  AND #7',
            '  EOR #7',
            '  TAX',
            '  LDA CB4D,X',
            '  STA MSC',
            '  RTS',
            'C8E2: ; PLT routine',
            '  LDY #0',
            '  PHP',
            '  LDA MSC',
            '  BIT FLG',
            '  BMI C8F0',
            '  EOR #$FF',
            '  AND (A),Y',
            '  JMP C8F2',
            'C8F0: ORA (A),Y',
            'C8F2: STA (A),Y',
            '  LDA A',
            '  STA USE',
            '  LDA B',
            '  LSR A',
            '  ROR USE',
            '  LSR A',
            '  ROR USE',
            '  LSR A',
            '  ROR USE',
            '  AND #$03',
            '  ORA #$04',
            '  STA USE+1',
            '  LDA CBID',
            '  STA (USE),Y',
            '  PLP',
            '  LDY TEMP',
            '  RTS',
            'C912: ; GCLEAR routine',
            '  LDA #>GRAPH',
            '  STA USE+1',
            '  LDY #<GRAPH',
            '  STY USE',
            '  LDX #$20',
            'C91C: TYA',
            '  STA (USE),Y',
            '  INY',
            '  BNE C91C',
            '  INC USE+1',
            '  DEX',
            '  BNE C91C',
            '  JMP C937',
            'C92A: ; PCOLOR routine',
            '  JSR CHKGET',
            '  STX CBID',
            '  RTS',
            'C931: ; SCOLOR routine',
            '  JSR CHKGET',
            '  STX CBID',
            'C937: LDX #$03',
            '  LDA #>VIDEO',
            '  STA USE+1',
            '  LDY #<VIDEO',
            '  STY USE',
            '  STY FLG',
            'C943: LDA CBID',
            'C946: STA (USE),Y',
            '  INY',
            '  CPY FLG',
            '  BNE C946',
            '  INC USE+1',
            '  DEX',
            '  BEQ C955',
            '  BPL C946',
            '  RTS',
            'C955: LDX #$E8',
            '  STX FLG',
            '  BNE C946',
            'C9BB: ; HLINE routine',
            '  PHA',
            '  LDA XCH',
            '  LSR A',
            '  LDA XCL',
            '  ROR A',
            '  LSR A',
            '  LSR A',
            '  STA TEMP',
            '  PLA',
            '  PHA',
            '  SEC',
            '  SBC XCL',
            '  PHA',
            '  TXA',
            '  SBC XCH',
            '  STA DIF3',
            '  BCS C9E1',
            '  PLA',
            '  EOR #$FF',
            '  ADC #1',
            '  PHA',
            '  LDA #0',
            '  SBC DIF3',
            'C9E1: STA DIF1',
            '  STA DIF5',
            '  PLA',
            '  STA DIFO',
            '  STA DIF4',
            '  PLA',
            '  STA XCL',
            '  STX XCH',
            '  TYA',
            '  CLC',
            '  SBC YC',
            '  BCC CA06',
            '  EOR #$FF',
            '  ADC #$FE',
            'CA06: STA DIF2',
            '  STY YC',
            '  ROR DIF3',
            '  SEC',
            '  SBC DIFO',
            '  TAX',
            '  LDA #$FF',
            '  SBC DIF1',
            '  STA CTR',
            '  LDY TEMP',
            '  BCS CA16',
            'CA11: ASL A',
            '  JSR C9A6',
            '  SEC',
            'CA16: LDA DIF4',
            '  ADC DIF2',
            '  STA DIF4',
            '  LDA DIF5',
            '  SBC #0',
            'CA20: STA DIF5',
            '  STY TEMP',
            '  JSR C8E2',
            '  INX',
            '  BNE CA2F',
            '  INC CTR',
            '  BNE CA2F',
            '  RTS',
            'CA2F: LDA DIF3',
            '  BCS CA11',
            '  JSR C979',
            '  CLC',
            '  LDA DIF4',
            '  ADC DIFO',
            '  STA DIF4',
            '  LDA DIF5',
            '  ADC DIF1',
            '  BVC CA20'
        ]
    }

def get_drawing_package_data() -> Dict[str, List[str]]:
    """Returns the data tables for the graphics package."""
    return {
        'CB2F': [
            'CB2F: ; MULH table',
            '  .BYTE 0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16',
            '  .BYTE 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31'
        ],
        'CB49': [
            'CB49: ; MULL table',
            '  .BYTE $00, $40, $80, $C0'
        ],
        'CB4D': [
            'CB4D: ; MSCTAB table',
            '  .BYTE %00000001, %00000010, %00000100, %00001000',
            '  .BYTE %00010000, %00100000, %01000000, %10000000'
        ]
    }
